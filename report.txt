CRITICAL DESIGN UPDATE NEEDED FOR DESIGN.md

Based on implementation experience, the single most important update needed is:

**Add explicit memory management patterns for Config struct path handling**

The current DESIGN.md mentions the double-free issue in passing but doesn't provide the critical pattern that would save developers hours of debugging. The Config struct's src_path and dst_path fields get reassigned during path normalization, creating a subtle ownership transfer that leads to segmentation faults.

Recommended addition to DESIGN.md section "Command-Line Argument Path Conversion Pattern":

```zig
// CRITICAL: The parsed Config owns the original paths
// When converting to absolute paths, you MUST:
// 1. Save original pointers before reassignment
// 2. Free originals in a defer block
// 3. Assign new absolute paths to config
// 4. Let ParsedArgs.deinit() handle the absolute paths

var config = parsed.config;
const orig_src = config.src_path;  // Save before reassignment
const orig_dst = config.dst_path;
defer {
    allocator.free(orig_src);  // Free originals
    allocator.free(orig_dst);
}

config.src_path = try getAbsolutePath(allocator, orig_src);
config.dst_path = try getAbsolutePath(allocator, orig_dst);
// ParsedArgs.deinit() will now free the absolute paths
```

This pattern is non-obvious because:
1. The Config struct is embedded in ParsedArgs, not a pointer
2. Path strings are reassigned, not replaced
3. The ownership transfer happens across function boundaries
4. Standard defer patterns don't apply due to the reassignment

Without this explicit pattern, developers will encounter segmentation faults that are difficult to debug, as the double-free occurs during cleanup, not at the point of error. This single addition would prevent the most time-consuming bug in the implementation process.