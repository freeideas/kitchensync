CRITICAL DOCUMENTATION UPDATE FOR DESIGN.md:

Add a section on "Memory Management Patterns" after the "Memory Management" section:

### Critical Memory Management Pattern for Command-Line Arguments

**CRITICAL BUG**: The most common crash in KitchenSync implementations comes from improper handling of parsed command-line arguments when paths are converted to absolute paths.

When parsing command-line arguments:
1. Arguments are initially stored in the ParsedArgs struct
2. These paths are then converted to absolute paths using realpathAlloc/resolve
3. The original path pointers in the config struct are reassigned to the new absolute paths
4. This creates a double-free situation if not handled correctly

**Correct Pattern:**
```zig
var config = parsed.config;

// Store original pointers before reassignment
const orig_src_path = config.src_path;
const orig_dst_path = config.dst_path;
defer {
    allocator.free(orig_src_path);
    allocator.free(orig_dst_path);
}

// Convert to absolute paths
const src_absolute = try std.fs.cwd().realpathAlloc(allocator, config.src_path);
defer allocator.free(src_absolute);
config.src_path = src_absolute;  // Reassign pointer

// ParsedArgs defer block must NOT free src_path/dst_path anymore
```

This pattern prevents the #1 cause of segmentation faults in the application. Without this explicit handling, developers will encounter crashes after the sync completes when the cleanup code tries to free already-freed memory.

---

This documentation addition would save developers significant debugging time by highlighting the most subtle and crash-prone aspect of the implementation that isn't obvious from the existing design documentation.